// (C)2021, DIGI-P, NERD.JP, applying the BSD Lite License to the below source code.
// for Unity 2018.4.20f
// This is the unity shader applying a FishEye Circle Image to a Sphere 3D object, Roughly, 
// and porting the Photoshop version to Unity shader.
//
Shader "Unlit/SphericalShader"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
    }
    SubShader
    {
        Tags {"Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" }
        LOD 100

		ZWrite Off 
		Blend SrcAlpha OneMinusSrcAlpha

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);

                UNITY_TRANSFER_FOG(o,o.vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
				float2 MyUV;

				float du = (i.uv[0] - 0.5f) * 3.14129f;
				float dv = (i.uv[1] - 0.5f) * 3.14129f;

				float cb = cos( dv) * cos( du );
				float sb = sqrt(1.0f - (cb * cb));

				float b = acos( cb ) * (2.0f / 3.14129f);

				float dx;
				float dy;

				if ( (sb >= 0.0f) && (sb <= (1.0f / 100.0f)) ) {
					dx = cos( dv ) * sin( du );
					dy = sin( dv );
				} else {
					dx = (b * cos( dv ) * sin( du ) / sb );
					dy = (b * sin( dv ) / sb );
				}
				
				MyUV[0] = dx/2.0f + 0.5f;
				MyUV[1] = dy/2.0f + 0.5f;

				fixed4 col = tex2D(_MainTex, MyUV);

                // apply fog
                UNITY_APPLY_FOG(i.fogCoord, col);
                return col;
            }
            ENDCG
        }
    }
}
