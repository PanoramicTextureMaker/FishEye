// Photoshop Plug-in for converting a fishyey image 
// to square for 3dcg texture, made by 
// Hirofumi Inomata, (C) 2003
// I disclose AS-IS, only a main part, "do.c", for the plug-in,
// with BSD License. And it had included some flugments 
// with cut & try, also. Enjoy It!
//
Shader "Unlit/SphericalShader"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
    }
    SubShader
    {
        Tags {"Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" }
        LOD 100

		ZWrite Off 
		Blend SrcAlpha OneMinusSrcAlpha

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);

                UNITY_TRANSFER_FOG(o,o.vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
		float2 MyUV;

		fixed4 col ;

		if ( abs( 2.0f * (i.uv[0] - 0.5f  )) <= 0.5f ) {
				
			float du = 2.0f * (i.uv[0] - 0.5f  ) * 3.14129f;
			float dv = (i.uv[1] - 0.5f ) * 3.14129f;
			float cb = cos( dv) * cos( du );
			float sb = sqrt(1.0f - (cb * cb));

			float b = acos( cb ) * (2.0f / 3.14129f);

			float dx;
			float dy;

			if ( (sb >= 0.0f) && (sb <= (1.0f / 100.0f)) ) {
				dx = cos( dv ) * sin( du );
				dy = sin( dv );
			} else {
				dx = (b * cos( dv ) * sin( du ) / sb );
				dy = (b * sin( dv ) / sb );
			}
				
			MyUV[0] = dx/2.0f + 0.5f;
			MyUV[1] = dy/2.0f + 0.5f;

			col = tex2D(_MainTex, MyUV);
		} else {
			col[0] = col[1] = col[1] = col[3] = 0.0f;
		}
		
                // apply fog
                UNITY_APPLY_FOG(i.fogCoord, col);
                return col;
            }
            ENDCG
        }
    }
}
